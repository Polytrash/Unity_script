
#ifndef FXCOMPOSER_VERSION	/* for very old versions */
#define FXCOMPOSER_VERSION 180
#endif /* FXCOMPOSER_VERSION */

/*****************************************************************/
/*** EFFECT-SPECIFIC CODE BEGINS HERE ****************************/
/*****************************************************************/

/******* ライティングマクロ *******/
/** "オブジェクトスペース"でライティングするためには、以下の2つのマクロが必要とのこと **/
#define LIGHT_COORDS "World"
// #define OBJECT_SPACE_LIGHTS /* もし LIGHT_COORDS が "Object" の場合 */
/**   COLLADA-FXによる "shared surface" のシャドウマップを生成できるように
　　 shared surfaceをインポート、使用することを許可するためのUSE_SHARED_SHADOW を定義する **/
// #define USE_SHARED_SHADOW

float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Main;";
> = 0.8;

 //////////////////// 編集不可パラメータ ////////////////////

// 頂点オブジェクトをワールド空間に変換:
float4x4 gWorldXf : World < string UIWidget="None"; >;

// 法線、タンジェント、従法線オブジェクトをワールド空間に変換:
float4x4 gWorldITXf : WorldInverseTranspose < string UIWidget="None"; >;

// 頂点オブジェクトをビュー空間に変換して投影:
float4x4 gWvpXf : WorldViewProjection < string UIWidget="None"; >;

// ビューもしくはカメラ座標から得られたトランスフォーム値をワールド空間に戻す:
float4x4 gViewIXf : ViewInverse < string UIWidget="None"; >;

// ビュー座標
float4x4 gViewXf	: View	< string UIWidget="None"; >;

// プロジェクション
float4x4 gProjXf	: Projection	< string UIWidget="None"; >;

// モデルビュー行列の転置行列

float4x4 gMViewITXf : ModelViewInverseTranspose	< string UIWidget="None"; >;

 //////////////////// 編集可能パラメータ ////////////////////

// "DirPos" Lamp 0 /////////
float4 gLamp0DirPos : Direction <
    string Object = "InfiniteLight0";
    string UIName =  "Directional Light : Direction";
    string Space = "World";
> = {0.0f, 0.0f, 0.0f, 0.0f};

float3 gLamp0Color : COLOR <
    string UIName =  "Directional Light : Color";
    string Object = "InfiniteLight0";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

// Ambient Light
float3 gAmbiColor <
    string UIName =  "Ambient Light";
    string UIWidget = "Color";
> = {0.07f,0.07f,0.07f};


//////// COLOR & TEXTURE /////////////////////

////////////////////////////////////////////////////
// カラー										  //
////////////////////////////////////////////////////

float3 gBaseModifyColor <
    string UIName =  "Base Modify Color";
    string UIWidget = "Color";
    string type     = "color";
> = {1.0f,1.0f,1.0f};

texture gBaseTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Base Texture";
    string ResourceType = "2D";
>;

sampler2D gBaseSampler = sampler_state {
    Texture = <gBaseTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
}; 


////////////////////////////////////////////////////
// 影											  //
////////////////////////////////////////////////////

float3 gKageModifyColor <
    string UIName =  "Kage Modify Color";
    string UIWidget = "Color";
	string type     = "color";
> = {1.0f,1.0f,1.0f};

texture gKageTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Kage Texture";
    string ResourceType = "2D";
>;

sampler2D gKageSampler = sampler_state {
    Texture = <gKageTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
}; 

texture gKageMaskTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Kage Mask Texture";
    string ResourceType = "2D";
>;

sampler2D gKageMaskSampler = sampler_state {
    Texture = <gKageMaskTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
}; 


////////////////////////////////////////////////////
// ノーマル										  //
////////////////////////////////////////////////////

//頂点法線とノーマルマップのどちらを参照するか、
bool gNormalToggle
<
  string UIWidget = "RadioButton";
  string UIName   = "Use NormalMap";
> = true;

texture gNormalTexture  <
    string ResourceName = "default_bump_normal.dds";
    string UIName =  "NormalMap Texture";
    string ResourceType = "2D";
>;


sampler2D gNormalSampler = sampler_state {
    Texture = <gNormalTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
}; 

float gBorderNormal <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "Border Detail";
> = 0.0; 

float gBumpStrength
<
	string UIName =  "Bump Strength";
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.01;
> = 0.0f;
////////////////////////////////////////////////////
// ハイライト									  //
////////////////////////////////////////////////////

float3 gHighlightColor <
    string UIName =  "Highlight Color";
    string UIWidget = "Color";
    string type     = "color";
> = {1.0f,1.0f,1.0f};

texture gHighlightMaskTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Highlight Mask Texture";
    string ResourceType = "2D";
>;

sampler2D gHighlightMaskSampler = sampler_state {
    Texture = <gHighlightMaskTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
}; 

float gHighlightIntensity <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 10.0;
    float UIStep = 0.01;
    string UIName =  "Highlight Intensity";
> = 0;

float gHighlightRadius <
    string UIWidget = "slider";
    float UIMin = 0.1;
    float UIMax = 10.0;
    float UIStep = 0.1;
    string UIName =  "Highlight Radius";
> = 1;

float gHighlightScale <
    string UIWidget = "slider";
    float UIMin = -10.0;
    float UIMax = 10.0;
    float UIStep = 0.01;
    string UIName =  "Highlight Scale";
> = 0;

////////////////////////////////////////////////////
// スペキュラー									  //
////////////////////////////////////////////////////

texture gSpecMaskTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Specular Mask Texture";
    string ResourceType = "2D";
>;

sampler2D gSpecMaskSampler = sampler_state {
    Texture = <gSpecMaskTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
}; 

float3 gSpecColor <
    string UIName =  "Specular Color";
    string UIWidget = "Color";
    string type     = "color";
> = {1.0f,1.0f,1.0f};

float gSpecPower <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 100.0;
    float UIStep = 0.05;
    string UIName =  "Specular Power";
> = 0;

float gShininess <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 100.0;
    float UIStep = 0.05;
    string UIName =  "Shininess";
> = 10;

////////////////////////////////////////////////////
// スペキュラー									  //
////////////////////////////////////////////////////

float3 gRimColor <
    string UIName =  "Rim Color";
    string UIWidget = "Color";
    string type     = "color";
> = {1.0f,1.0f,1.0f};

float gRimPower
<
	string UIName =  "Rim Power";
	string UIWidget = "Slider";
	float UIMin = 1.0;
	float UIMax = 100.0;
	float UIStep = 0.01;
> = 1.0f;

float gRimWidth <
    string UIName =  "Rim Width";
    string UIWidget = "Slider";
    float UIMin = 0.1;
    float UIMax = 10.0;
    float UIStep = 0.01;

> = 0;

////////////////////////////////////////////////////
// アウトライン									  //
////////////////////////////////////////////////////

float3 gOutlineColor	
<
	string UIName =  "Outline Color";
	string UIObject = "RGBA";
	string UIWidget = "Color";
	string type     = "color";
> = {0.0f, 0.0f, 0.0f};

float gOutlineWidth
<
	string UIName =  "OutLine Width";
	string UIWidget = "Slider";
	float UIMin = -1.0;
	float UIMax = 1.0;
	float UIStep = 0.01;
> = 0.0f;

bool gIgnoreNormal
<
  string UIWidget = "RadioButton";
  string UIName   = "Ignore Normal";
> = true;

float4 gOutlineOffset <
    string Object = "RGBA";
    string UIName =  "XYZ Offset";
> = {0.0f,0.0f,0.0f,0.0f};


#ifdef USE_SHARED_SHADOW
#define MAX_SHADOW_BIAS 0.01
#define MIN_SHADOW_BIAS 0.00005
#include "include/shadowMap.cgh"
DECLARE_SHADOW_XFORMS("SpotLight0",gLampViewXf,gLampProjXf,gShadowViewProjXf)
DECLARE_SHADOW_BIAS
DECLARE_SHADOW_MAPS(ColorShadTarget,ColorShadSampler,DepthShadTarget,DepthShadSampler)

float ShadDens <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "Shadow Density";
> = 0.7;
#endif /* USE_SHARED_SHADOW */


//////// CONNECTOR DATA STRUCTURES ///////////
//############################################
// 変数定義用
//############################################
/* data from application vertex buffer */
struct appdata {
    float3 Position	: POSITION;
    float4 UV		: TEXCOORD0;
    float4 Normal	: NORMAL;
    float4 Tangent	: TANGENT0;
    float4 Binormal	: BINORMAL0;
	float4 Color : COLOR0;
};



//////// CONNECTOR DATA STRUCTURES ///////////
//############################################
// アウトライン用
//############################################
struct vertexOutput_Outline
{
	float4 	HPosition : POSITION;	//頂点データ
	float4	WVec0 : TEXCOORD0;	    //法線データ

};
//----------------------------------------------------------------------------//


//////// CONNECTOR DATA STRUCTURES ///////////
//############################################
// シェーディング用
//############################################
struct vertexOutput {
    float4 HPosition	: POSITION;
    float2 UV		: TEXCOORD0;
    // The following values are passed in "World" coordinates since
    //   it tends to be the most flexible and easy for handling
    //   reflections, sky lighting, and other "global" effects.
    float3 LightVec	: TEXCOORD1;
    float3 WorldNormal	: TEXCOORD2;
    float3 WorldTangent	: TEXCOORD3;
    float3 WorldBinormal : TEXCOORD4;
    float3 WorldView	: TEXCOORD5;
	float4 TVec0 : TEXCOORD6;
	float4 Color : COLOR;
#ifdef USE_SHARED_SHADOW
    // This optional value expresses the current location in "light"
    //   coordinates for use with shadow mapping.
    float4 LProj	: LPROJ_COORD;
#endif /* USE_SHARED_SHADOW */
};




// MEMO
////////////////// 編集不可パラメータ ////////////////////

// 頂点オブジェクトをワールド空間に変換:
//float4x4 gWorldXf : World < string UIWidget="None"; >;
// 法線、タンジェント、従法線オブジェクトをワールド空間に変換:
//float4x4 gWorldITXf : WorldInverseTranspose < string UIWidget="None"; >;

// 頂点オブジェクトをビュー空間に変換して投影:
//float4x4 gWvpXf : WorldViewProjection < string UIWidget="None"; >;

// ビューもしくはカメラ座標から得られたトランスフォーム値をワールド空間に戻す:
//float4x4 gViewIXf : ViewInverse < string UIWidget="None"; >;

// ビュー座標
//float4x4 gViewXf	: View	< string UIWidget="None"; >;

// プロジェクション
//float4x4 gProjXf	: Projection	< string UIWidget="None"; >;

// モデルビュー行列の転置行列

//float4x4 gMViewITXf : ModelViewInverseTranspose	< string UIWidget="None"; >;



// 0.0 - 1.0 の間でランダム値を生成 ※NekodenShader_Scrribble用
float hash(float2 seed){
	return frac(sin(dot(seed.xy ,float2(12.9898,78.233))) * 43758.5453);
}

// 参照する法線の切り替え
float switchNormal(appdata IN)
{  
	float4 N = float4(IN.Normal.xyz, 0.0);
	if(gIgnoreNormal > 0) 
		N = (IN.Color * (2.0, 2.0, 2.0, 2.0)) - (1.0, 1.0, 1.0, 1.0); 
		return N;
}


inline float2 TransformViewToProjection (float2 N) { return float2(N.x * gProjXf[0][0], N.y * gProjXf[1][1]); }

//----------------------------------------------------------------------------//
//////////////////////////////////////////////
///////// VERTEX OUTLINE /////////////////////
//////////////////////////////////////////////
vertexOutput NekoDen_outline_VS(appdata IN)
{
	vertexOutput OUT;

	//	ワールド空間に変換した法線
	float4 N = float4(IN.Normal.xyz, 0.0);

	if(gIgnoreNormal > 0) 
		N = (IN.Color * (2.0, 2.0, 2.0, 2.0)) - (1.0, 1.0, 1.0, 1.0); 


	// ポジションデータを法線方向に押し出しNを掛け
	// 太さをカメラに対して均一にするためＺ(奥行き)を掛ける:oDepth
	float4 Pos = float4(IN.Position.xyz, 1.0);
	float2 offset = TransformViewToProjection(N.xy);

	float oDepth = abs(mul(gViewXf, Pos).z);

	// xyz → xzy 
	Pos.xyz += (IN.Color.r + 0.5) * N * (gOutlineWidth * 0.1) * oDepth;							
	Pos.x +=  Pos.x * (IN.Color.r + 0.5) * (gOutlineWidth * 0.1) * gOutlineOffset.x;
	Pos.z +=  Pos.y * (IN.Color.r + 0.5) * (gOutlineWidth * 0.1) * gOutlineOffset.y;
	Pos.y +=  Pos.z * (IN.Color.r + 0.5) * (gOutlineWidth * 0.1) * gOutlineOffset.z;	
	
	//Pos.xyz += (gOutlineWidth / 10) * N * IN.Color.r * oDepth;	//スライダーを扱いやすくするために10で割る
	OUT.HPosition = mul(gWvpXf, Pos);
	//OUT.UV = mul(gWorldITXf, N);

	return OUT;
}

//////////////////////////////////////////////
///////// FRAGMENT OUTLINE ///////////////////
//////////////////////////////////////////////
float4 NekoDen_outline_FS(vertexOutput_Outline IN) : COLOR
{	
	float4 OutColor;
	OutColor = float4(gOutlineColor, 1.0);	//輪郭カラーを設定
	
	return OutColor;

}

//----------------------------------------------------------------------------//


//----------------------------------------------------------------------------//

//////////////////////////////////////////////
///////// VERTEX SHADING /////////////////////
//////////////////////////////////////////////

/*********** Generic Vertex Shader ******/

vertexOutput NekoDen_std_VS(appdata IN,uniform float4x4 WorldITXf, uniform float4x4 WorldXf,
						uniform float4x4 ViewIXf, uniform float4x4 WvpXf,
#ifdef USE_SHARED_SHADOW
	uniform float4x4 ShadowViewProjXf,
	uniform float ShadBias,
#endif /* USE_SHARED_SHADOW */
	uniform float4 LampDirPos
) {


    vertexOutput OUT = (vertexOutput)0;

    OUT.WorldNormal = mul(WorldITXf,IN.Normal).xyz;
    OUT.WorldTangent = mul(WorldITXf,IN.Tangent).xyz;
    OUT.WorldBinormal = mul(WorldITXf,IN.Binormal).xyz;

    float4 Po = float4(IN.Position.xyz,1);
    float4 Pw = mul(WorldXf,Po);	// ワールド空間に変換

// オブジェクトスペースライト
#ifdef OBJECT_SPACE_LIGHTS
    float4 Lw = mul(WorldXf,LampDirPos);	// ワールド空間に変換
#else /* !OBJECT_SPACE_LIGHTS -- standard world-space lights */
    float4 Lw = LampDirPos;
#endif /* !OBJECT_SPACE_LIGHTS */
    if (Lw.w == 0) {
	OUT.LightVec = -normalize(Lw.xyz);
    } else {
	// we are still passing a (non-normalized) vector
	OUT.LightVec = Lw.xyz - Pw.xyz;
    }

// テクスチャY軸反転
#ifdef FLIP_TEXTURE_Y
    OUT.UV = float2(IN.UV.x,(1.0-IN.UV.y));
#else /* !FLIP_TEXTURE_Y */
    OUT.UV = IN.UV.xy;
#endif /* !FLIP_TEXTURE_Y */


// シャドウ
#ifdef USE_SHARED_SHADOW
    float4 Pl = mul(ShadowViewProjXf,Pw);  // "P" in light coords
    float4x4 BiasXf = make_bias_mat(ShadBias);
    OUT.LProj = mul(BiasXf,Pl);		　　　　// bias to make texcoord
#endif /* USE_SHARED_SHADOW */

    OUT.WorldView = normalize(float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw.xyz);
    OUT.HPosition = mul(WvpXf,Po);
    return OUT;
}


//////////////////////////////////////////////
///////// FRAGMENT SHADING ///////////////////
//////////////////////////////////////////////

float4 NekoDen_FS(vertexOutput IN, uniform float3 LampColor,	
				uniform float3 BaseModifyColor, uniform sampler2D BaseSampler, uniform float3 KageModifyColor, uniform sampler2D KageSampler, uniform sampler2D KageMaskSampler, 
				uniform sampler2D NormalSampler, uniform float BumpStrength, uniform float BorderNormal, uniform bool NormalToggle,
				uniform float3 HighlightColor, uniform sampler2D HighlightMaskSampler, uniform float HighlightIntensity, uniform float HighlightRadius, uniform float HighlightScale,
				uniform sampler2D SpecMaskSampler, uniform float3 SpecColor, uniform float SpecPower, uniform float Shininess, 
				uniform float3 RimColor, uniform float RimPower, uniform float RimWidth,
				uniform float3 AmbiColor
) : COLOR {
    // 各ベクトルの定義
    float3 Ln = normalize(IN.LightVec);
    float3 Vn = normalize(IN.WorldView);
    float3 Nn = normalize(IN.WorldNormal);
    float3 Tn = normalize(IN.WorldTangent);
    float3 Bn = normalize(IN.WorldBinormal);
	// 法線
    float3 bump =  BumpStrength * BorderNormal * (tex2D(NormalSampler,IN.UV).rgb - float3(0.5,0.5,0.5));
    Nn = Nn + bump.x * Tn + bump.y * Bn;
    Nn = normalize(Nn);
    
	float3 Hn = normalize(Vn + Ln);
    float4 litV = lit(dot(Ln,Nn),dot(Hn,Nn),SpecPower);

    float3 diffContrib = litV.y * LampColor;
    float3 specContrib = litV.y * litV.z * Shininess * LampColor;

    float3 baseTexColor = tex2D(BaseSampler,IN.UV).rgb;
	float3 kageTexColor = tex2D(KageSampler,IN.UV).rgb;
	float3 kageMaskColor = tex2D(KageMaskSampler, IN.UV).rgb;
	float3 specMaskColor = tex2D(SpecMaskSampler, IN.UV).rgb;
	float3 highlightMaskColor = tex2D(HighlightMaskSampler, IN.UV).rgb;

	float attenuation = 1.0;
	float coeff = 1.0;

	// ブレンド用変数
	float4 baseModify_var;
	float4 kageModify_var;
				
	// スペキュラライト
	float3 specularLighting = saturate(pow(max(0.0, dot( reflect(-Ln, lerp(IN.WorldNormal, Nn, NormalToggle)), Vn)), Shininess)) * LampColor.rgb * attenuation * SpecColor.rgb * specMaskColor.r * kageMaskColor.r * SpecPower;

	// リムライト
	float rim =  1 -  saturate(dot(IN.WorldNormal, Vn));			
	float3 rimLighting =  RimColor * saturate(dot(Nn, Vn)) * pow(rim * RimWidth, RimPower);
			
								
	// ブレンド用リム
	float rimBlend =  (HighlightRadius - ((HighlightScale * 0.1) + pow(dot(lerp(IN.WorldNormal, Nn, NormalToggle), Ln), HighlightScale)));

	// ブレンド値
	float blendAmount = saturate((coeff + (((1.0 - (dot(IN.WorldNormal, Ln) + 2.0)) * rimBlend) * ((1.0 - kageMaskColor.rgb).r - coeff)) / rimBlend));
				
	// 影ブレンド制御
	float3 blendedColor = saturate((HighlightRadius - ((HighlightScale * 0.1) + pow(dot(lerp(IN.WorldNormal, Nn, NormalToggle), Ln), HighlightScale)))) * HighlightIntensity * HighlightColor.rgb;
		
	// ベースカラー調整
	baseModify_var.r = (1.0 - blendAmount) * baseTexColor.r + (1.0 - (1.0 - blendAmount)) * BaseModifyColor.r;
	baseModify_var.g = (1.0 - blendAmount) * baseTexColor.g + (1.0 - (1.0 - blendAmount)) * BaseModifyColor.g;
	baseModify_var.b = (1.0 - blendAmount) * baseTexColor.b + (1.0 - (1.0 - blendAmount)) * BaseModifyColor.b;
	baseModify_var.a = 1.0;

	// 影カラー調整
	kageModify_var.r = blendAmount * (kageTexColor.r + (1.0 -  blendAmount)) + KageModifyColor.r;
	kageModify_var.g = blendAmount * (kageTexColor.g + (1.0 -  blendAmount)) + KageModifyColor.g;
	kageModify_var.b = blendAmount * (kageTexColor.b + (1.0 -  blendAmount)) + KageModifyColor.b;
	kageModify_var.a = 1.0;

 #ifdef USE_SHARED_SHADOW

    float shadowed = tex2Dproj(DepthShadSampler,IN.LProj).x;
	float faded = 1.0 - (ShadDens * (1.0-shadowed));
	diffContrib *= faded;
	specContrib *= shadowed;
#endif /* USE_SHARED_SHADOW */

	float3 result = specContrib+(baseTexColor*(diffContrib+AmbiColor));
    result +=  lerp( kageTexColor.rgb * kageModify_var.rgb + rimLighting + AmbiColor * LampColor,
					 baseTexColor.rgb * baseModify_var.rgb + rimLighting + (specularLighting.rgb * kageMaskColor.r) + AmbiColor * LampColor, blendAmount * kageMaskColor.r )			
					// ベースのハイライト制御
					+ ((blendedColor.rgb * HighlightColor.rgb ) * highlightMaskColor.rgb);
								 
    return float4(result,1);
}

//----------------------------------------------------------------------------//

///////////////////////////////////////
/// TECHNIQUES ////////////////////////
///////////////////////////////////////

technique Main <
	string Script = "Pass=p0;";
> {	

	//サーフェース用パス
    pass p0 <
	string Script = "Draw=geometry;";
    > {
        VertexProgram = compile vp40 NekoDen_std_VS(gWorldITXf,gWorldXf,
				gViewIXf,gWvpXf,
#ifdef USE_SHARED_SHADOW
				gShadowViewProjXf, gShadBias,
#endif /* USE_SHARED_SHADOW */
				gLamp0DirPos);
		
		// アルファ深度テスト
		AlphaTestEnable = true;
		DepthTestEnable = true;
		DepthFunc = LEqual;
		
		// アルファブレンド
		BlendEnable = true;
		BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
		BlendEquation = FuncAdd;

		// カリング
		CullFaceEnable = true;
		CullFace = back;
		

        FragmentProgram = compile fp40 NekoDen_FS(gLamp0Color,
					    gBaseModifyColor, gBaseSampler, gKageModifyColor, gKageSampler, gKageMaskSampler, 
					    gNormalSampler,	gBumpStrength, gBorderNormal, gNormalToggle,
						gHighlightColor, gHighlightMaskSampler, gHighlightIntensity, gHighlightRadius, gHighlightScale,
						gSpecMaskSampler, gSpecColor, gSpecPower, gShininess, 
						gRimColor, gRimPower, gRimWidth, 
					    gAmbiColor
					    );
    }

	pass p1
	{
        VertexProgram = compile vp40 NekoDen_outline_VS();
		
		// アルファ深度テスト
		AlphaTestEnable = true;
		DepthTestEnable = true;
		DepthFunc = LEqual;
		
		// アルファブレンド
		BlendEnable = false;
		BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
		BlendEquation = FuncAdd;

		// カリング
		CullFaceEnable = true;
		CullFace = front;		

        FragmentProgram = compile fp40 NekoDen_outline_FS();
	}
}

/////////////////////////////////////// eof //