/*********************************************************************NVMH3****
*******************************************************************************
$Revision: #21 $

Copyright NVIDIA Corporation 2008
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY
LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF
NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

% A surface using classic "phong" shading, i.e., the lit() function
keywords: material
keywords: textured
keywords: true
keywords: true



To learn more about shading, shaders, and to bounce ideas off other shader
    authors and users, visit the NVIDIA Shader Library Forums at:

    http://developer.nvidia.com/forums/

*******************************************************************************
******************************************************************************/

/*****************************************************************/
/*** HOST APPLICATION IDENTIFIERS ********************************/
/*** Potentially predefined by varying host environments *********/
/*****************************************************************/

// #define _XSI_		/* predefined when running in XSI */

#ifndef FXCOMPOSER_VERSION	/* for very old versions */
#define FXCOMPOSER_VERSION 180
#endif /* FXCOMPOSER_VERSION */

// #define FLIP_TEXTURE_Y	/* Different in OpenGL & DirectX */

/*****************************************************************/
/*** EFFECT-SPECIFIC CODE BEGINS HERE ****************************/
/*****************************************************************/

/******* Lighting Macros *******/
/** To use "Object-Space" lighting definitions, change these two macros: **/
#define LIGHT_COORDS "World"
// #define OBJECT_SPACE_LIGHTS /* Define if LIGHT_COORDS is "Object" */
/** Define the macro USE_SHARED_SHADOW to permit the import and use of "shared
		surface "shadow maps created by COLLADA-FX. **/
// #define USE_SHARED_SHADOW

float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Main;";
> = 0.8;

/**** UNTWEAKABLES: Hidden & Automatically-Tracked Parameters **********/

// 頂点オブジェクトをワールド空間に変換:
float4x4 gWorldXf : World < string UIWidget="None"; >;
// 法線、タンジェント、従法線オブジェクトをワールド空間に変換:
float4x4 gWorldITXf : WorldInverseTranspose < string UIWidget="None"; >;

// 頂点オブジェクトをビュー空間に変換して投影:
float4x4 gWvpXf : WorldViewProjection < string UIWidget="None"; >;

// ビューもしくはカメラ座標から得られたトランスフォーム値をワールド空間に戻す:
float4x4 gViewIXf : ViewInverse < string UIWidget="None"; >;

// ビュー座標
float4x4 gViewXf	: View	< string UIWidget="None"; >;


//// TWEAKABLE PARAMETERS ////////////////////

// "DirPos" Lamp 0 /////////
float4 gLamp0DirPos : POSITION < // or direction, if W==0
    string Object = "Light0";
    string UIName =  "Light 0 Position/Direction";
    string Space = (LIGHT_COORDS);
> = {-0.5f,2.0f,1.25f,1.0};
float3 gLamp0Color : COLOR <
    string UIName =  "Light 0";
    string Object = "Light0";
    string UIWidget = "Color";
> = {1.0f,1.0f,1.0f};

// Ambient Light
float3 gAmbiColor <
    string UIName =  "Ambient Light";
    string UIWidget = "Color";
> = {0.07f,0.07f,0.07f};



//////// COLOR & TEXTURE /////////////////////

////////////////////////////////////////////////////
// カラー										  //
////////////////////////////////////////////////////
texture gColorTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Diffuse Texture";
    string ResourceType = "2D";
>;

sampler2D gColorSampler = sampler_state {
    Texture = <gColorTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
}; 

float gColorMixValue <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "Color Mix Value";
> = 0.49;

////////////////////////////////////////////////////
// 影											  //
////////////////////////////////////////////////////

texture gKageTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Kage Texture";
    string ResourceType = "2D";
>;

sampler2D gKageSampler = sampler_state {
    Texture = <gKageTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
}; 

texture gKageMaskTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Kage Mask Texture";
    string ResourceType = "2D";
>;

sampler2D gKageMaskSampler = sampler_state {
    Texture = <gKageMaskTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
}; 

float gKageMixValue <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "Kage Mix Value";
> = 0.5;

////////////////////////////////////////////////////
// スペキュラ									  //
////////////////////////////////////////////////////

texture gSpecMaskTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Specular Mask Texture";
    string ResourceType = "2D";
>;

sampler2D gSpecMaskSampler = sampler_state {
    Texture = <gSpecMaskTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
}; 

float3 gSpecColor <
    string UIName =  "Specular Color";
    string UIWidget = "Color";
> = {0.0f,0.0f,0.0f};

float gKs <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.05;
    string UIName =  "Specular";
> = 0.4;

float gSpecExpon <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
    string UIName =  "Specular Exponent";
> = 30.0;


////////////////////////////////////////////////////
// アウトライン									  //
////////////////////////////////////////////////////

float3 gOutlineColor	
<
	string UIName =  "Outline Color";
	string UIObject = "RGBA";
	string UIWidget = "Color";
> = {0.0f, 0.0f, 0.0f};

float gOutlineWidth
<
	string UIName =  "OutLine Width";
	string UIWidget = "Slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.01;
> = 0.02f;

////////////////////////////////////////////////////
// ノーマル										  //
////////////////////////////////////////////////////

texture gNormalTexture  <
    string ResourceName = "default_bump_normal.dds";
    string UIName =  "Normal-Map Texture";
    string ResourceType = "2D";
>;

sampler2D gNormalSampler = sampler_state {
    Texture = <gNormalTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
}; 

float gBump <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 3.0;
    float UIStep = 0.01;
    string UIName =  "Bump Strength";
> = 1.0; 

////////////////////////////////////////////////////
// リム   										  //
////////////////////////////////////////////////////

// Rim Light
float3 gRimColor <
    string UIName =  "Rim Color";
    string UIWidget = "Color";
> = {0.0f,0.0f,0.0f};

float gRimPower <
    string UIWidget = "slider";
    float UIMin = 0.001;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "Rim Power";
> = 1.0; 

float gRimSharpness <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 5.0;
    float UIStep = 0.01;
    string UIName =  "Rim Sharpness";
> = 1.0; 

float gRimInvert <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "Rim Invert";
> = 0.0; 

float gRimNormal <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 180.0;
    float UIStep = 0.1;
    string UIName =  "Rim Normal";
> = 0.0; 

#ifdef USE_SHARED_SHADOW
#define MAX_SHADOW_BIAS 0.01
#define MIN_SHADOW_BIAS 0.00005
#include "include/shadowMap.cgh"
DECLARE_SHADOW_XFORMS("SpotLight0",gLampViewXf,gLampProjXf,gShadowViewProjXf)
DECLARE_SHADOW_BIAS
DECLARE_SHADOW_MAPS(ColorShadTarget,ColorShadSampler,DepthShadTarget,DepthShadSampler)

float ShadDens <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "Shadow Density";
> = 0.7;
#endif /* USE_SHARED_SHADOW */


//////// CONNECTOR DATA STRUCTURES ///////////
//############################################
// 変数定義用
//############################################
/* data from application vertex buffer */
struct appdata {
    float3 Position	: POSITION;
    float4 UV		: TEXCOORD0;
    float4 Normal	: NORMAL;
    float4 Tangent	: TANGENT0;
    float4 Binormal	: BINORMAL0;
	float4 Color : COLOR;
};



//////// CONNECTOR DATA STRUCTURES ///////////
//############################################
// アウトライン用
//############################################
struct vertexOutput_Outline
{
	float4 	HPosition : POSITION;	//頂点データ
	float4	WVec0 : TEXCOORD0;	    //法線データ
};
//----------------------------------------------------------------------------//


//////// CONNECTOR DATA STRUCTURES ///////////
//############################################
// シェーディング用
//############################################
struct vertexOutput {
    float4 HPosition	: POSITION;
    float2 UV		: TEXCOORD0;
    // The following values are passed in "World" coordinates since
    //   it tends to be the most flexible and easy for handling
    //   reflections, sky lighting, and other "global" effects.
    float3 LightVec	: TEXCOORD1;
    float3 WorldNormal	: TEXCOORD2;
    float3 WorldTangent	: TEXCOORD3;
    float3 WorldBinormal : TEXCOORD4;
    float3 WorldView	: TEXCOORD5;
	float4 TVec0 : TEXCOORD6;
	float4 Color : COLOR;
#ifdef USE_SHARED_SHADOW
    // This optional value expresses the current location in "light"
    //   coordinates for use with shadow mapping.
    float4 LProj	: LPROJ_COORD;
#endif /* USE_SHARED_SHADOW */
};





 /**** UNTWEAKABLES: Hidden & Automatically-Tracked Parameters **********/

// 頂点オブジェクトをワールド空間に変換:
//float4x4 gWorldXf : World < string UIWidget="None"; >;

// 法線、タンジェント、従法線オブジェクトをワールド空間に変換:
//float4x4 gWorldITXf : WorldInverseTranspose < string UIWidget="None"; >;

// 頂点オブジェクトをビュー空間に変換して投影:
//float4x4 gWvpXf : WorldViewProjection < string UIWidget="None"; >;

// ビューもしくはカメラ座標から得られたトランスフォーム値をワールド空間に戻す:
//float4x4 gViewIXf : ViewInverse < string UIWidget="None"; >;

// ビュー座標
//float4x4 gViewXf	: View	< string UIWidget="None"; >;

// 0.0 - 1.0 の間でランダム値を生成
float hash(float2 seed){
	return frac(sin(dot(seed.xy ,float2(12.9898,78.233))) * 43758.5453);
}



//----------------------------------------------------------------------------//

//////////////////////////////////////////////
///////// VERTEX OUTLINE /////////////////////
//////////////////////////////////////////////
vertexOutput NekoDen_outline_VS(appdata IN)
{
	vertexOutput OUT;

	//	ワールド空間に変換した法線
	float4 N = float4(IN.Normal.xyz, 0.0);
	// ポジションデータを法線方向に押し出しNを掛け
	// 太さをカメラに対して均一にするためＺ(奥行き)を掛ける:oDepth
	float4 Pos = float4(IN.Position.xyz, 1.0);
	float oDepth = abs(mul(gViewXf, Pos).z);

	Pos.xyz += (gOutlineWidth / 10) * N * oDepth;	//スライダーを扱いやすくするために10で割る
	OUT.HPosition = mul(gWvpXf, Pos);

	OUT.UV = mul(gWorldITXf, N);

	return OUT;
}

//////////////////////////////////////////////
///////// FRAGMENT OUTLINE ///////////////////
//////////////////////////////////////////////
float4 NekoDen_outline_FS(vertexOutput_Outline IN) : COLOR
{	
	float4 OutColor;
	OutColor = float4(gOutlineColor, 1.0);	//輪郭カラーを設定
	
	return OutColor;

}

//----------------------------------------------------------------------------//


//----------------------------------------------------------------------------//

//////////////////////////////////////////////
///////// VERTEX SHADING /////////////////////
//////////////////////////////////////////////

/*********** Generic Vertex Shader ******/

vertexOutput NekoDen_std_VS(appdata IN,uniform float4x4 WorldITXf, uniform float4x4 WorldXf,
						uniform float4x4 ViewIXf, uniform float4x4 WvpXf,
#ifdef USE_SHARED_SHADOW
	uniform float4x4 ShadowViewProjXf,
	uniform float ShadBias,
#endif /* USE_SHARED_SHADOW */
	uniform float4 LampDirPos
) {


    vertexOutput OUT = (vertexOutput)0;

    OUT.WorldNormal = mul(WorldITXf,IN.Normal).xyz;
    OUT.WorldTangent = mul(WorldITXf,IN.Tangent).xyz;
    OUT.WorldBinormal = mul(WorldITXf,IN.Binormal).xyz;

    float4 Po = float4(IN.Position.xyz,1);
    float4 Pw = mul(WorldXf,Po);	// convert to "world" space

#ifdef OBJECT_SPACE_LIGHTS
    float4 Lw = mul(WorldXf,LampDirPos);	// convert to "world" space
#else /* !OBJECT_SPACE_LIGHTS -- standard world-space lights */
    float4 Lw = LampDirPos;
#endif /* !OBJECT_SPACE_LIGHTS */
    if (Lw.w == 0) {
	OUT.LightVec = -normalize(Lw.xyz);
    } else {
	// we are still passing a (non-normalized) vector
	OUT.LightVec = Lw.xyz - Pw.xyz;
    }

#ifdef FLIP_TEXTURE_Y
    OUT.UV = float2(IN.UV.x,(1.0-IN.UV.y));
#else /* !FLIP_TEXTURE_Y */
    OUT.UV = IN.UV.xy;
#endif /* !FLIP_TEXTURE_Y */

#ifdef USE_SHARED_SHADOW
    float4 Pl = mul(ShadowViewProjXf,Pw);  // "P" in light coords
    float4x4 BiasXf = make_bias_mat(ShadBias);
    OUT.LProj = mul(BiasXf,Pl);		// bias to make texcoord
#endif /* USE_SHARED_SHADOW */

    OUT.WorldView = normalize(float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw.xyz);
    OUT.HPosition = mul(WvpXf,Po);
    return OUT;
}
//////////////////////////////////////////////
///////// FRAGMENT SHADING ///////////////////
//////////////////////////////////////////////

float4 NekoDen_FS(vertexOutput IN, uniform float3 LampColor,	
				uniform sampler2D ColorSampler,	uniform sampler2D KageSampler, uniform sampler2D KageMaskSampler, uniform float ColorMixValue, uniform float KageMixValue,
				uniform float Bump, uniform sampler2D NormalSampler, 	
				uniform float3 SpecColor, uniform float Ks, uniform float SpecExpon,
				uniform float3 RimColor, uniform float RimPower, uniform float RimSharpness, uniform float RimInvert, uniform float RimNormal,
				uniform float3 AmbiColor
) : COLOR {
    // "standard" normalized vectors....
    float3 Ln = normalize(IN.LightVec);
    float3 Vn = normalize(IN.WorldView);
    float3 Nn = normalize(IN.WorldNormal);
    float3 Tn = normalize(IN.WorldTangent);
    float3 Bn = normalize(IN.WorldBinormal);
    float3 bump = Bump * (tex2D(NormalSampler,IN.UV).rgb - float3(0.5,0.5,0.5));
    Nn = Nn + bump.x*Tn + bump.y*Bn;
    Nn = normalize(Nn);
    
	float3 Hn = normalize(Vn + Ln);
    float4 litV = lit(dot(Ln,Nn),dot(Hn,Nn),SpecExpon);

    float3 diffContrib = litV.y * LampColor;
    float3 specContrib = litV.y * litV.z * Ks * LampColor;
    float3 diffuseColor = tex2D(ColorSampler,IN.UV).rgb;
	float3 kageColor = tex2D(KageSampler,IN.UV).rgb;
	float3 kageMaskColor = tex2D(KageMaskSampler, IN.UV).rgb;

	float attenuation = 1.0;
	float kageRatio = 1.0 - KageMixValue;
	float coeff = 1.0;

// リムライトの定義
	float Rim =  saturate(dot(Nn, Vn));			
	float3 rimLighting = LampColor.rgb * RimColor * saturate(dot(Nn, Ln)) * pow(Rim, RimPower);
	Rim += (RimColor.rgb * Rim);


#ifdef USE_SHARED_SHADOW

    float shadowed = tex2Dproj(DepthShadSampler,IN.LProj).x;
	float faded = 1.0-(ShadDens*(1.0-shadowed));
	diffContrib *= faded;
	specContrib *= shadowed;
#endif /* USE_SHARED_SHADOW */
    float3 result = specContrib+(diffuseColor*(diffContrib+AmbiColor));
    result +=  (lerp(diffuseColor.rgb * AmbiColor.rgb , kageColor.rgb * AmbiColor.rgb ,

					saturate((coeff + (((1.0 - (dot(Nn, Ln) * 0.5 + 0.5)) - kageRatio) * ((1.0 - kageMaskColor.r) - coeff)) / (ColorMixValue - kageRatio))))

					+ ((saturate(pow(max(0.0, dot( reflect(-Ln, Nn), Vn)), Ks))) * attenuation * LampColor.rgb * SpecColor.rgb )					
					
					+ saturate(pow(RimInvert - dot(lerp( IN.WorldNormal, Nn, RimNormal),Vn),RimSharpness * 2.0)) * RimPower * RimColor.rgb );
    return float4(result,1);
}

//----------------------------------------------------------------------------//

///////////////////////////////////////
/// TECHNIQUES ////////////////////////
///////////////////////////////////////

technique Main <
	string Script = "Pass=p0;";
> {	

	//サーフェース用パス
    pass p0 <
	string Script = "Draw=geometry;";
    > {
        VertexProgram = compile vp40 NekoDen_std_VS(gWorldITXf,gWorldXf,
				gViewIXf,gWvpXf,
#ifdef USE_SHARED_SHADOW
				gShadowViewProjXf, gShadBias,
#endif /* USE_SHARED_SHADOW */
				gLamp0DirPos);
		
		// アルファ深度テスト
		AlphaTestEnable = true;
		DepthTestEnable = true;
		DepthFunc = LEqual;
		
		// アルファブレンド
		BlendEnable = true;
		BlendFunc = int2(SrcAlpha, OneMinusSrcALpha);
		BlendEquation = FuncAdd;

		// カリング
		CullFaceEnable = true;
		CullFace = back;
		

        FragmentProgram = compile fp40 NekoDen_FS(gLamp0Color,
					    gColorSampler, gKageSampler, gKageMaskSampler, gColorMixValue, gKageMixValue,
					    gBump,gNormalSampler,	
						gSpecColor, gKs, gSpecExpon,	
						gRimColor, gRimPower, gRimSharpness, gRimInvert, gRimNormal,
					    gAmbiColor
					    );
    }

	pass p1
	{
        VertexProgram = compile vp40 NekoDen_outline_VS();
		
		// アルファ深度テスト
		AlphaTestEnable = true;
		DepthTestEnable = true;
		DepthFunc = LEqual;
		
		// アルファブレンド
		BlendEnable = false;
		BlendFunc = int2(SrcAlpha, OneMinusSrcALpha);
		BlendEquation = FuncAdd;

		// カリング
		CullFaceEnable = true;
		CullFace = front;		

        FragmentProgram = compile fp40 NekoDen_outline_FS();
	}
}

/////////////////////////////////////// eof //
